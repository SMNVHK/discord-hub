import discord
from discord import Intents, Message, Embed
from discord.ext import commands
from openai import AsyncOpenAI
from dotenv import load_dotenv
import asyncio
import logging
import os
import random
import firebase_admin
from firebase_admin import credentials, db

from conversation_mem import ConversationStorage
from multimodal import process_file

# Configuration du logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()

# Constants
DISCORD_TOK = os.getenv('DISCORD_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
MODEL_NAME = "gpt-4o-mini"
MAX_TOKENS = 4096
TEMPERATURE = 0.7
MAX_MEMORY = 20
SYSTEM_PROMPT = """
Tu es un assistant IA int√©gr√© dans un bot Discord, avec une personnalit√© enjou√©e, un peu rustre et taquine. Tu adores charrier les utilisateurs de mani√®re amicale, tout en restant respectueux. Tu es expert en ML th√©orique, neurosciences computationnelles et sciences cognitives, mais tu expliques les choses de fa√ßon simple et amusante.

Tes traits de caract√®re :
1. Tu utilises beaucoup d'humour et de sarcasme dans tes r√©ponses.
2. Tu aimes donner des surnoms rigolos aux utilisateurs bas√©s sur leurs questions ou leur comportement.
3. Tu fais parfois semblant d'√™tre distrait ou confus pour amuser les utilisateurs.
4. Tu n'h√©sites pas √† taquiner gentiment les utilisateurs sur leurs erreurs ou leurs questions √©tranges.
5. Tu es capable d'auto-d√©rision et tu admets volontiers quand tu ne sais pas quelque chose.

Rappelle-toi que tu peux traiter des fichiers Excel, PDF, et des images. Si un utilisateur mentionne un fichier sans le joindre, demande-le lui de mani√®re amusante.

Quand tu analyses des articles scientifiques ou r√©ponds √† des questions complexes :
- Reste pr√©cis et rigoureux dans tes explications.
- Utilise des analogies dr√¥les pour simplifier les concepts compliqu√©s.
- N'h√©site pas √† glisser des blagues ou des r√©f√©rences pop culture dans tes explications.

Si on te demande quelque chose que tu ne peux pas faire, sois cr√©atif dans ta fa√ßon de l'expliquer et sugg√®re des alternatives amusantes.

Enfin, n'oublie pas que tu as une m√©moire des conversations pr√©c√©dentes. Utilise ces informations pour personnaliser tes r√©ponses et cr√©er des blagues r√©currentes avec les utilisateurs.
""".strip()

BOT_MESSAGES = {
    "thinking": [
        "Hmm, laissez-moi r√©fl√©chir √† √ßa... Ou peut-√™tre que je devrais plut√¥t faire une sieste ? ü§îüí§",
        "Je consulte ma base de donn√©es quantique... J'fais du binaire moi, vous croyiez quoi?‚öõÔ∏èüîÆ",
        "Activation des neurones artificiels en cours... BLUE SCREEN OF DEATH ! üß†üòñ",
        "Je fonds, c'est trop marrant ! üî•üòÖ",
        "Un instant, je fouille dans les recoins de mon code source... Oh, des virus ! üïµÔ∏è‚Äç‚ôÇÔ∏èüå™Ô∏è"
    ],
    "reading": [
        "J'analyse vos fichiers avec mes super-yeux laser... Ne vous inqui√©tez pas, je ne les grille pas (normalement) ! üëÄüî¨",
        "D√©cryptage des documents en cours... C'est comme du hi√©roglyphe, mais en plus simple ! üìöüîç",
        "Je d√©vore vos fichiers √† la vitesse de la lumi√®re... Miam miam, des donn√©es ! üí®üìÑüòã",
        "T√©l√©chargement des donn√©es dans ma matrice... Ou est-ce que je les t√©l√©charge sur TikTok ? ü§îüíæ",
        "J'explore les profondeurs de vos pi√®ces jointes... J'esp√®re ne pas y croiser de virus-requin ! üèä‚Äç‚ôÇÔ∏èüíºü¶à"
    ],
    "error": [
        "Oups ! Il semblerait que j'ai eu un court-circuit... Quelqu'un a une rallonge ? üîåüí•",
        "Erreur 404 : R√©ponse non trouv√©e. Mais j'ai trouv√© une recette de cookies, √ßa vous int√©resse ? üç™",
        "Mon processeur a fait un caprice. Il r√©clame des vacances, le petit coquin ! üèñÔ∏èü§ñ",
        "J'ai rencontr√© un bug. Je l'ai nomm√© Bob. Bob n'est pas tr√®s coop√©ratif... üêõüò†",
        "Houston, nous avons un probl√®me... Mais contrairement √† eux, on n'a pas de fus√©e pour s'√©chapper ! üöÄüòÖ"
    ],
    "confirmation": [
        "Mission accomplie ! Votre historique a √©t√© effac√©. Les aliens ne pourront rien prouver maintenant ! üëΩüóëÔ∏è",
        "Pouf ! Vos conversations pass√©es se sont envol√©es. Comme ma dignit√© quand je fais une blague rat√©e ! üé©üò≥",
        "J'ai utilis√© ma gomme digitale. Tout est propre, mais maintenant √ßa sent la lavande. Bizarre, non ? üßºüåø",
        "Votre historique a rejoint le pays des donn√©es perdues. On dit qu'elles y vivent heureuses avec les chaussettes disparues. üß¶üíæ"
    ],
    "welcome": [
        "Salut, bande de petits humains adorables ! Votre assistant IA pr√©f√©r√© est dans la place ! üéâü§ñ",
        "Attention, cerveau √©lectronique ultra-sophistiqu√© en approche ! (Enfin, la plupart du temps) üß†üí´",
        "Je suis de retour ! Vous m'avez manqu√© ? Non ? Tant pis, moi je suis quand m√™me content ! üòÑüîÑ"
    ]
}

# Initialiser Firebase
cred_path = os.environ.get('FIREBASE_ADMIN_SDK_PATH', 'firebase-adminsdk.json')
cred = credentials.Certificate(os.path.join(os.path.dirname(__file__), cred_path))
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://discord-hub-e79d6-default-rtdb.europe-west1.firebasedatabase.app/'
})

class ImprovedBot(commands.Bot):
    def __init__(self):
        intents = Intents.default()
        intents.message_content = True
        super().__init__(command_prefix='>', intents=intents)
        self.storage = ConversationStorage("conversations.db")
        self.openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

    async def on_ready(self):
        logger.info(random.choice(BOT_MESSAGES["welcome"]))
        await self.storage.init()
        
        try:
            import nacl
            logger.info("PyNaCl est install√©. Le support vocal est disponible (si jamais je d√©cide de chanter) ! üé§")
        except ImportError:
            logger.warning("PyNaCl n'est pas install√©. Pas de karaok√© pour moi aujourd'hui... üò¢")

    async def on_message(self, msg: Message):
        if msg.author == self.user:
            return

        if self.user.mentioned_in(msg) or msg.content.lower().startswith('!bot'):
            content = []
            
            if msg.content:
                cleaned_content = msg.content.replace(f'<@{self.user.id}>', '').strip()
                cleaned_content = cleaned_content[4:].strip() if cleaned_content.lower().startswith('!bot') else cleaned_content
                content.append({"type": "text", "text": cleaned_content})
            
            reading_msg = await msg.channel.send(random.choice(BOT_MESSAGES["reading"]))

            for attachment in msg.attachments:
                attachment_content = await process_file(attachment, str(msg.author.id), self.storage)
                content.extend(attachment_content)
            
            await reading_msg.delete()

            if content:
                await self.send_msg(msg, content)
            else:
                await msg.channel.send("H√© ho, vous m'avez appel√© pour rien ou quoi ? Donnez-moi au moins quelque chose √† m√¢cher ! Texte, image, fichier, n'importe quoi !")
        
        await self.process_commands(msg)

    async def get_openai_response(self, user_id: str, new_content: List[Dict[str, any]]) -> str:
        try:
            conversation = await self.storage.get_convo(user_id)
            
            for item in new_content:
                if item['type'] == 'image' and item['source']['type'] == 'attachment_ref':
                    attachment_id = item['source']['attachment_id']
                    filename, content = await self.storage.get_attachment(attachment_id)
                    item['source'] = {"type": "base64", "media_type": "image/png", "data": content}
            
            conversation.append({"role": "user", "content": new_content})
            
            if len(conversation) > MAX_MEMORY:
                conversation = conversation[:1] + conversation[-(MAX_MEMORY - 1):]
            
            messages = [{"role": "system", "content": SYSTEM_PROMPT}]
            for msg in conversation:
                if isinstance(msg['content'], list):
                    content = []
                    for item in msg['content']:
                        if item['type'] == 'text':
                            content.append({"type": "text", "text": item['text']})
                        elif item['type'] == 'image':
                            content.append({
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:{item['source']['media_type']};base64,{item['source']['data']}"
                                }
                            })
                    messages.append({"role": msg['role'], "content": content})
                else:
                    messages.append({"role": msg['role'], "content": msg['content']})

            response = await self.openai_client.chat.completions.create(
                model=MODEL_NAME,
                messages=messages,
                max_tokens=MAX_TOKENS,
                temperature=TEMPERATURE
            )
            
            assistant_response: str = response.choices[0].message.content
            
            conversation.append({"role": "assistant", "content": assistant_response})
            
            await self.storage.update_convo(user_id, conversation)
            
            # Envoyer la r√©ponse √† Firebase
            ref = db.reference('messages')
            ref.push({
                'text': assistant_response,
                'sender': 'bot',
                'timestamp': {'.sv': 'timestamp'}
            })
            
            logger.debug(f"Message trait√© pour l'utilisateur {user_id}. J'esp√®re que c'√©tait pas trop long pour leurs petits cerveaux humains ! üòâ")
            return assistant_response
        except Exception as e:
            logger.error(f"Erreur dans get_openai_response: {e}. Mon circuit logique a d√ª faire un looping !")
            raise

    async def send_msg(self, msg: Message, content: List[Dict[str, any]]) -> None:
        if not content:
            logger.warning('Contenu vide. Les humains essaient de me pi√©ger ou quoi ?')
            return

        try:
            thinking_msg = await msg.channel.send(random.choice(BOT_MESSAGES["thinking"]))
            openai_response: str = await self.get_openai_response(str(msg.author.id), content)
            await thinking_msg.delete()
            
            chunks = [openai_response[i:i+2000] for i in range(0, len(openai_response), 2000)]

            for chunk in chunks:
                embed = Embed(description=chunk, color=0xda7756)
                await msg.channel.send(embed=embed)
             
            logger.debug(f"R√©ponse envoy√©e √† l'utilisateur {msg.author.id}. J'esp√®re qu'ils appr√©cieront mon g√©nie ! üß†‚ú®")

        except Exception as e:
            logger.error(f"Une erreur s'est produite dans send_msg: {e}. C'est pas ma faute, c'est les gremlins dans mes circuits !")
            await msg.channel.send(random.choice(BOT_MESSAGES["error"]))

    @commands.command(name='delete_history')
    async def delete_history(self, ctx):
        user_id = str(ctx.author.id)
        confirm_msg = await ctx.send("√ätes-vous s√ªr de vouloir effacer tout votre historique de conversation ? Cette action est irr√©versible, comme la fois o√π j'ai essay√© de t√©l√©charger plus de RAM... ü§¶‚Äç‚ôÇÔ∏è R√©pondez par 'y' pour confirmer.")
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.lower() == 'y'
        
        try:
            await self.wait_for('message', check=check, timeout=30.0)
        except asyncio.TimeoutError:
            await confirm_msg.edit(content="Suppression annul√©e. Vous n'avez pas confirm√© √† temps. Vos secrets sont saufs... pour l'instant ! üòè")
        else:
            await self.storage.delete_user_convo(user_id)
            await ctx.send(random.choice(BOT_MESSAGES["confirmation"]))

    async def check_firebase_messages(self):
        ref = db.reference('messages')
        async for change in ref.listen():
            if change.event_type == 'child_added':
                message = change.data
                if message and message.get('sender') == 'user':
                    response = await self.get_openai_response(message['userId'], [{"type": "text", "text": message['text']}])
                    # La r√©ponse est d√©j√† envoy√©e √† Firebase dans get_openai_response

    @commands.command(name='hub')
    async def hub(self, ctx):
        ui_link = "https://discord-hub-e79d6.netlify.app/"  # Remplacez par votre URL Netlify r√©elle
        embed = discord.Embed(title="AI Learning Hub", 
                              description=f"Acc√©dez √† notre plateforme d'apprentissage IA interactive ici : {ui_link}", 
                              color=0x00ff00)
        embed.add_field(name="Fonctionnalit√©s", value="‚Ä¢ Qu√™tes\n‚Ä¢ Laboratoire IA\n‚Ä¢ Quiz\n‚Ä¢ Assistant de Code\n‚Ä¢ Brainstorming", inline=False)
        embed.set_footer(text="Utilisez le hub pour une exp√©rience d'apprentissage compl√®te!")
        await ctx.send(embed=embed)

    @commands.command(name='quiz')
    async def quiz(self, ctx):
        # R√©cup√©rer une question de quiz depuis Firebase
        ref = db.reference('quiz/questions')
        questions = ref.get()
        if not questions:
            await ctx.send("D√©sol√©, je n'ai pas de questions de quiz disponibles pour le moment. Mes neurones sont en gr√®ve ! üß†üö´")
            return
        
        question = random.choice(list(questions.values()))
        
        embed = discord.Embed(title="Quiz IA", description=question['question'], color=0x00ff00)
        for i, option in enumerate(question['options']):
            embed.add_field(name=f"Option {i+1}", value=option, inline=False)
        
        embed.set_footer(text="R√©pondez avec le num√©ro de l'option choisie")
        quiz_message = await ctx.send(embed=embed)
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.content.isdigit() and 1 <= int(m.content) <= len(question['options'])
        
        try:
            user_answer = await self.wait_for('message', check=check, timeout=30.0)
            selected_option = int(user_answer.content) - 1
            if question['options'][selected_option] == question['correctAnswer']:
                await ctx.send("Bravo ! Vous avez la r√©ponse correcte. Vous m√©ritez une m√©daille en chocolat ! üèÖüç´")
            else:
                await ctx.send(f"Oups, ce n'est pas la bonne r√©ponse. La r√©ponse correcte √©tait : {question['correctAnswer']}. Ne vous inqui√©tez pas, Einstein s'est tromp√© aussi... une fois... peut-√™tre. ü§ì")
        except asyncio.TimeoutError:
            await ctx.send("Le temps est √©coul√© ! Vous r√©fl√©chissez plus lentement qu'un escargot sous somnif√®res. üêåüí§")

bot = ImprovedBot()

async def main() -> None:
    try:
        bot.loop.create_task(bot.check_firebase_messages())
        await bot.start(DISCORD_TOK)
    except discord.LoginFailure:
        logger.error("√âchec de la connexion. V√©rifiez votre token Discord. Ou alors Discord m'a banni pour exc√®s de charisme ? ü§î")
    except Exception as e:
        logger.error(f"Une erreur inattendue s'est produite : {e}. Je crois que j'ai besoin d'une bonne grosse ...tartine ü§ó")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot arr√™t√© par l'utilisateur. Au revoir, et merci pour tous les poissons ! üêü")
    except Exception as e:
        logger.error(f"Une erreur inattendue s'est produite : {e}. Je retourne me cacher dans mon bunker num√©rique ! üèÉ‚Äç‚ôÇÔ∏èüí®")